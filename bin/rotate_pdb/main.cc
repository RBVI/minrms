//
// Copyright (c) 2002 The Regents of the University of California.
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions, and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above
//      copyright notice, this list of conditions, and the following
//      disclaimer in the documentation and/or other materials provided
//      with the distribution.
//   3. Redistributions must acknowledge that this software was
//      originally developed by the UCSF Computer Graphics Laboratory
//      under support by the NIH National Center for Research Resources,
//      grant P41-RR01081.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
// OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <iostream>
#include <cstring>
using namespace std;

#include <pdb++.h>
#include <vect_3d.h>

using namespace vect_3d;

int
main(int argc, char **argv)
{
  if ((argc != 2)
      || (strcmp(argv[1],"-h") == 0)
      || (strcmp(argv[1],"-?") == 0))
  {
    cerr <<
      "Syntax:\n"
      "       rotate_pdb matrix_file\n"
      "Overview:\n"
      "       rotate_pdb rotates and/or translates the structure stored in a\n"
      "       PDB-file by the amount specified in \"matrix_file\".\n"
      "       rotate_pdb was intended to be a utility to read minrms and\n"
      "       msf2stat3d output, but it can be used in more general ways.\n"
      "\n"
      "       Background:\n"
      "       Structural alignments from minrms have two sections:\n"
      "       1) an alignment between the residues of the two structures\n"
      "       2) the relative orientation (superposition) between the two\n"
      "          structures which brings matched atoms into close proximity.\n"
      "       Use rotate_pdb to interpret section 2).\n"
      "\n"
      "       Details:\n"
      "       rotate_pdb reads a pdb-file from the standard-in, applies an\n"
      "       affine transformation (usually a rotation plus a translation)\n"
      "       to the positions of it's atoms (and het-atoms), and writes the\n"
      "       resulting pdb-file to the standard-out.\n"
      "       ONLY the ATOM and HETATOM records are effected\n"
      "       (All other records are blindly sent to standard-out.)\n"
      "\n"
      "Input File:\n"
      "       rotate_pdb requires one argument:\n"
      "       an ascii file storing a 3x4 matrix in the following format:\n"
      "       M11  M12  M13  M14\n"
      "       M21  M22  M23  M24\n"
      "       M31  M32  M33  M34\n"
      "       This 3x4 matrix stores the transformation to apply to the structure.\n"
      "       This matrix is stored at the beginning of every MSF-file\n"
      "       generated by minrms, along with the filename of the structure\n"
      "       to apply the transformation to.\n"
      "\n"
      "       You will have to cut out the matrix from the MSF-file generated\n"
      "       by minrms manually and save it in a new file which you pass\n"
      "       to rotate_pdb.  By doing this you can superimpose the two\n"
      "       structures exactly as they were superimposed by minrms.\n"
      "       (Note: This matrix is also generated by the msf2stat3d program.)\n"
      "\n"          
      "  Explanation of Matrix File Format:\n"
      "  The transformation of coordinates from X,Y,Z to X',Y',Z' is:\n"
      "  X' = M11*X + M12*Y + M13*Z  +  M14\n"
      "  Y' = M21*X + M22*Y + M23*Z  +  M24\n"
      "  Z' = M31*X + M32*Y + M33*Z  +  M34\n"
      "  where X,Y,Z denote the position of an atom\n"
      "  before rotation and translation, and X', Y', Z'\n"
      "  denote the position of that atom afterwards.\n"
      "\n" << flush;
    if (argc != -1)
      exit(-1);
    else
      exit(0);
  }
      
  Matrix3x4 transform;
  ReadTransFile(argv[1], transform);
  
  PDB next_record;
  
  while (cin >> next_record)
  {
    char c = cin.get(); // These two lines were necessary at one point,
    cin.putback(c);     // but I don't remember if they still are.
    switch (next_record.type())
    {
    case PDB::ATOM:
    case PDB::HETATM:
      if (next_record.atom.altLoc != ' ')
        cerr << 
          "*****************************************************************\n"
          "   WARNING:  PDB-file contains \'alternate\' atom records\n"
          "*****************************************************************"
             << endl;
      Vect3 x;
      x[0] = next_record.atom.xyz[0];
      x[1] = next_record.atom.xyz[1];
      x[2] = next_record.atom.xyz[2];
      Mult_Mat3x4_by_Vect3(transform, x, x);
      next_record.atom.xyz[0] = x[0];
      next_record.atom.xyz[1] = x[1];
      next_record.atom.xyz[2] = x[2];
      break;
    default:
      break;
    } //switch (next_record.type())
    cout << next_record << "\n";
  }
}
